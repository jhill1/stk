.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::STK 3pm"
.TH Bio::STK 3pm "2011-08-31" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "STK \- Supertree Tool Kit"
.IX Header "STK - Supertree Tool Kit"
.SS "Description"
.IX Subsection "Description"
\&\fB\s-1STK\s0\fR is a collection of tools to prepare data ready for supertree 
contruction with PAUP* or similar. It relies on a file-based database
based on tree and \s-1XML\s0 files. Functions include finding all tree files,
xml files and summarising data. \s-1STK\s0 also comes with a number of scripts
ready for use.
.SS "Requires"
.IX Subsection "Requires"
Perl 5.004, XML::Simple, Bio::NEXUS, File::Find, Carp, File::Copy;
.SS "Feedback"
.IX Subsection "Feedback"
All feedback (bugs, feature enhancements, etc.) are all greatly appreciated.
.SS "Authors"
.IX Subsection "Authors"
Jon Hill (jon.hill@imperial.ac.uk) and Katie Davis (katie.davis@oum.ox.ac.uk)
.SS "Methods"
.IX Subsection "Methods"
\fIfind_tree_files\fR
.IX Subsection "find_tree_files"
.PP
.Vb 5
\& Title   : find_tree_files
\& Usage   : my @files = Bio::STK::find_tree_files($dir);
\& Function: Finds all tree files in specified directory and all sub\-directories
\& Returns : Array of complete filenames
\& Args    : $dir, else croaks.
.Ve
.PP
\fIfind_xml_files\fR
.IX Subsection "find_xml_files"
.PP
.Vb 5
\& Title   : find_xml_files
\& Usage   : my @files = Bio::STK::find_xml_files($dir);
\& Function: Finds all XML files in specified directory and all sub\-directories
\& Returns : Array of complete filenames
\& Args    : $dir, else croaks.
.Ve
.PP
\fIread_tree_file\fR
.IX Subsection "read_tree_file"
.PP
.Vb 5
\& Title   : read_tree_file
\& Usage   : my $tree = read_tree_file($file);
\& Function: Reads in a correctly formatted NEXUS tree file
\& Returns : An array of Newick tree formatted strings;
\& Args    : $file, else croaks.
.Ve
.PP
\fIread_xml_file\fR
.IX Subsection "read_xml_file"
.PP
.Vb 5
\& Title   : read_xml_file
\& Usage   : my $xml = read_xml_file($file);
\& Function: Reads in an XML file
\& Returns : The data structure from XML::Simple
\& Args    : $file, else croaks.
.Ve
.PP
A sample data structure is:
.PP
.Vb 10
\& \*(AqNotes\*(Aq => [
\&           \*(Aq2,430bp of the mitochondrial genes ND2, ND3 and cyt b.\*(Aq
\&         ],
\& \*(AqAnalysis\*(Aq => [
\&              {
\&                \*(AqType\*(Aq => [
\&                            \*(AqMP\*(Aq
\&                          ]
\&              }
\&            ],
\& \*(AqCharacters\*(Aq => [
\&                {
\&                  \*(AqOther\*(Aq => [
\&                               {}
\&                             ],
\&                  \*(AqBehavioural\*(Aq => [
\&                                     {}
\&                                   ],
\&                  \*(AqMorphological\*(Aq => [
\&                                       {}
\&                                     ],
\&                  \*(AqMolecular\*(Aq => [
\&                                   {
\&                                     \*(AqType\*(Aq => [
\&                                                 \*(Aqcytb\*(Aq,
\&                                                 \*(AqND2\*(Aq,
\&                                                 \*(AqND3\*(Aq
\&                                               ],
\&                                     \*(Aqnumber\*(Aq => \*(Aq3\*(Aq
\&                                   }
\&                                 ]
\&                }
\&              ],
\& \*(AqTaxa\*(Aq => [
\&          {
\&            \*(AqList\*(Aq => [
\&                        \*(AqCampylorhamphus falcularius\*(Aq,
\&                        \*(AqCampylorhamphus procurvoides\*(Aq,
\&                        \*(AqCampylorhamphus trochilirostris\*(Aq,
\&                        \*(AqDendrexetastes rufigula\*(Aq,
\&                        \*(AqDendrocolaptes certhia\*(Aq,
\&                        \*(AqGlyphorynchus spirurus\*(Aq,
\&                        \*(AqHylexetastes perrotii\*(Aq,
\&                        \*(AqLepidocolaptes albolineatus\*(Aq,
\&                        \*(AqLepidocolaptes angustirostris\*(Aq,
\&                        \*(AqLepidocolaptes fuscus\*(Aq,
\&                        \*(AqNasica longirostris\*(Aq,
\&                        \*(AqSittasomus griseicapillus\*(Aq,
\&                        \*(AqXiphocolaptes promeropirhynchus\*(Aq,
\&                        \*(AqXiphorhynchus erythropygius\*(Aq,
\&                        \*(AqXiphorhynchus flavigaster\*(Aq,
\&                        \*(AqXiphorhynchus guttatus\*(Aq,
\&                        \*(AqXiphorhynchus kienerii\*(Aq,
\&                        \*(AqXiphorhynchus lachrymosus\*(Aq,
\&                        \*(AqXiphorhynchus obsoletus\*(Aq,
\&                        \*(AqXiphorhynchus ocellatus\*(Aq,
\&                        \*(AqXiphorhynchus pardalotus\*(Aq,
\&                        \*(AqXiphorhynchus picus\*(Aq,
\&                        \*(AqXiphorhynchus spixii\*(Aq,
\&                        \*(AqXiphorhynchus susurrans\*(Aq,
\&                        \*(AqXiphorhynchus triangularis\*(Aq
\&                      ],
\&            \*(Aqnumber\*(Aq => \*(Aq25\*(Aq,
\&            \*(Aqfossil\*(Aq => \*(Aqnone\*(Aq
\&          }
\&        ],
\& \*(AqSource\*(Aq => [
\&            {
\&              \*(AqYear\*(Aq => [
\&                          \*(Aq2000\*(Aq
\&                        ],
\&              \*(AqPublisher\*(Aq => [
\&                               {}
\&                             ],
\&              \*(AqVolume\*(Aq => [
\&                            \*(Aq119\*(Aq
\&                          ],
\&              \*(AqEditor\*(Aq => [
\&                            {}
\&                          ],
\&              \*(AqPages\*(Aq => [
\&                           \*(Aq621\-640\*(Aq
\&                         ],
\&              \*(AqBooktitle\*(Aq => [
\&                               {}
\&                             ],
\&              \*(AqJournal\*(Aq => [
\&                             \*(AqAuk\*(Aq
\&                           ],
\&              \*(AqTitle\*(Aq => [
\&                           \*(AqMolecular systematics and the role of the "Varzea"\-"Terra\-firme" ecotone in
\& the diversification of Xiphorhynchus woodcreepers (Aves: Dendrocolaptidae).\*(Aq
\&                         ],
\&              \*(AqAuthor\*(Aq => [
\&                            \*(AqBar, A.\*(Aq
\&                          ]
\&            }
\&          ],
\& \*(AqTreeFile\*(Aq => [
\&              \*(Aqtree1.tre\*(Aq
\&            ]
.Ve
.PP
You can access by using structures like this: \f(CW\*(C`@{$xml_contents\-\*(C'\fR{Taxa}\->[0]\->{List}}>.
.PP
\fIsave_tree_file\fR
.IX Subsection "save_tree_file"
.PP
.Vb 5
\& Title   : save_tree_file
\& Usage   : save_tree_file($treefile, \e@tree_string, \e@tree_names);
\& Function: Save an array of tree strings to file. Will overwrite any existing file without checking
\& Returns : 1 if sucessful, 0 if not. CHECK THIS
\& Args    : $treefile, @tree_string, @tree_names
.Ve
.PP
This function does not check if the treefile already exists \- this is the responsibility of
the calling program.
.PP
\fIsave_tree_newick\fR
.IX Subsection "save_tree_newick"
.PP
.Vb 5
\& Title   : save_tree_newick
\& Usage   : save_tree_newick($treefile, \e@tree_string, \e@tree_names)
\& Function: Save an array of tree strings to file. Will overwrite any existing file without checking
\& Returns : 1 if sucessful, 0 if not. CHECK THIS
\& Args    : $treefile, \e@tree_string, \e@tree_names
.Ve
.PP
This function does not check if the treefile already exists \- this is the responsibility of
the calling program. The purpose of this function is to save a tree file in \*(L"raw\*(R" Newick format, 
i.e. without any other \s-1BLOCKS\s0 apart from \s-1TREE\s0. This is the simplist form of the treefile and hence
the most compatible with other software.
.PP
\fIsave_xml_file\fR
.IX Subsection "save_xml_file"
.PP
.Vb 5
\& Title   : save_xml_file
\& Usage   : save_xml_file($xmlfile, $xml_hash);
\& Function: Save a XML hash to file. Will overwrite any existing file without checking
\& Returns : 1 if sucessful, 0 if not. CHECK THIS
\& Args    : $xmlfile, $xml_hash
.Ve
.PP
This function does not check if the xml file already exists \- this is the responsibility of
the calling program.
.PP
\&\f(CW$xml_hash\fR is the same object as returned by read_xml_file.
.PP
\fIread_taxa_file\fR
.IX Subsection "read_taxa_file"
.PP
.Vb 5
\& Title   : read_taxa_file
\& Usage   : $nSubs = read_taxa_file($taxafile, \e@old_taxa, \e@new_taxa);
\& Function: Read in a taxa substitution file, populating @old_taxa and @new_taxa.
\& Returns : The number of substitutions.
\& Args    : $taxafile, \e@old_taxa, \e@new_taxa
.Ve
.PP
old_taxa contains each old taxa, with a corresponding entry in new_taxa, i.e.
.PP
.Vb 3
\& old_taxa[0] => new_taxa[0]
\& old_taxa[1] => new_taxa[1]
\& etc
.Ve
.PP
new_taxa will contain a string which is a comma-seperated list of all taxa that should replace
the old_taxa
.PP
\fItaxa_from_tree\fR
.IX Subsection "taxa_from_tree"
.PP
.Vb 5
\& Title   : taxa_from_tree
\& Usage   : my @taxa = taxa_from_tree($tree);
\& Function: Obtains unique taxa from a tree file or tree string
\& Returns : An array of taxa names or undef if error
\& Args    : $tree, else croaks.
.Ve
.PP
\&\f(CW$tree\fR can be a tree file or a \s-1NEXUS\s0 formatted tree string
.PP
\fIget_taxa_list\fR
.IX Subsection "get_taxa_list"
.PP
.Vb 5
\& Title   : get_taxa_list
\& Usage   : get_taxa_list($dir);
\& Function: Gets a list of unique taxa from a directory (and subdirectories) of tree files.
\& Returns : An array of unique names
\& Args    : $dir, else croaks.
.Ve
.PP
\fItaxa_from_xml\fR
.IX Subsection "taxa_from_xml"
.PP
.Vb 5
\& Title   : taxa_from_xml
\& Usage   : my @taxa = taxa_from_xml($input)
\& Function: Gets the taxa containedin XML file or XML hash
\& Returns : An array of strings containing the taxa
\& Args    : $input, else croaks.
.Ve
.PP
Note that input can be a filename or \s-1XML\s0 hash.
.PP
\fIget_analysis\fR
.IX Subsection "get_analysis"
.PP
.Vb 5
\& Title   : get_analysis
\& Usage   : $analysis = get_analysis($xmlfile);
\& Function: Gets the type of analysis used from an XML file
\& Returns : A string containing the type of analysis used
\& Args    : $xmlfile, else croaks.
.Ve
.PP
\fIget_year\fR
.IX Subsection "get_year"
.PP
.Vb 5
\& Title   : get_year
\& Usage   : $year = get_year($xmlfile);
\& Function: Gets the year from the bibliographic data
\& Returns : An integer containing the year the data were published
\& Args    : $xmlfile, else croaks.
.Ve
.PP
\fIget_source_data\fR
.IX Subsection "get_source_data"
.PP
.Vb 5
\& Title   : get_source_data
\& Usage   : %source = get_source_data($xmlfile);
\& Function: Gets the tsource information from an XML file
\& Returns : A hash containing the source information (journal, title, etc)
\& Args    : $xmlfile, else croaks.
.Ve
.PP
The output from get_source_data returns a Hash with the following structure:
.PP
.Vb 10
\& my %expected = (year => \*(Aq2000\*(Aq,
\&                volume => \*(Aq119\*(Aq,
\&                pages => \*(Aq621\-640\*(Aq,
\&                journal => \*(AqAuk\*(Aq,
\&                title => \*(AqMolecular systematics and the role of the "Varzea"\-"Terra\-firme" ecotone in the diversification of Xiphorhynchus woodcreepers (Aves: Dendrocolaptidae).\*(Aq,
\&                author => \*(AqBar, A.\*(Aq,
\&                booktitle => \*(AqSome title\*(Aq,
\&                editor => \*(AqSome editors\*(Aq,
\&                publisher => \*(AqSome publisher\*(Aq,
\&                );
.Ve
.PP
Access as a normal Hash.
.PP
\fIget_treefile\fR
.IX Subsection "get_treefile"
.PP
.Vb 5
\& Title   : get_treefile
\& Usage   : get_treefile($xmlfile);
\& Function: Get the tree files that this XML file is for
\& Returns : A string containing the B<relative> path of the tree file
\& Args    : $xmlfile, else croaks.
.Ve
.PP
\fIget_characters\fR
.IX Subsection "get_characters"
.PP
.Vb 5
\& Title   : get_characters
\& Usage   : get_characters($xmlfile);
\& Function: Get the chracters used in this analysis
\& Returns : A Hash containing the character types
\& Args    : $xmlfile, else croaks.
.Ve
.PP
The output from get_characters returns a Hash with the following structure:
.PP
.Vb 5
\& my %expected = (Molecular => [ "cytb", "ND2", "ND3" ],
\&                Morphological => [ "feathers" ],
\&                Other => [ "stuff" ],
\&                Behavioural => [ "stuff", "more stuff" ],
\&                );
.Ve
.PP
Access as a normal Hash and then array notation, i.e. \f(CW\*(C`$expected{molecular}[2]\*(C'\fR;
.PP
\fIcheck_tree_file\fR
.IX Subsection "check_tree_file"
.PP
.Vb 5
\& Title   : check_tree_file
\& Usage   : check_tree_file($file);
\& Function: Test that a tree file is a valid NEXUS file
\& Returns : 1 on success, 0 on failure \- REMEMBER TO CHECK THIS!
\& Args    : $file, else croaks.
.Ve
.PP
\fIreplace_taxon_tree\fR
.IX Subsection "replace_taxon_tree"
.PP
.Vb 7
\& Title   : replace_taxon_tree
\& Usage   : replace_taxon_tree(\e@treeString, $old_taxon, \e@new_taxa);
\& Function: Swap a taxon in a tree with a new one within an array of tree strings. Leave new_taxon blank to remove old_taxon
\& Returns : 1 on success, 0 on failure. \e@treeString contains new array of trees
\& Args    : \e@treeString, $old_taxon, \e@new_taxa. new_taxa may be null, in which case old_taxon is removed.
\&           @new_taxon is an array of names \- if this is longer than 1 element, then the old_taxon is
\&           replaced with a polytomy
.Ve
.PP
Note that this function uses \*(L"pass by reference\*(R" \- remember to add the slashes
.PP
\fIdelete_taxa\fR
.IX Subsection "delete_taxa"
.PP
.Vb 7
\& Title   : delete_taxa
\& Usage   : delete_taxa(\e@treeString, \e@to_delete);
\& Function: Remove multilple taxa from a tree
\& Returns : 1 on success, 0 on failure. \e@treeString contains new array of trees
\& Args    : \e@treeString, \e@to_delete
\&           \e@treeString is a reference to an array of tree strings
\&           \e@to_delete is an array of names
.Ve
.PP
Note that this function uses \*(L"pass by reference\*(R" \- remember to add the slashes
.PP
\fIreplace_taxon_xml\fR
.IX Subsection "replace_taxon_xml"
.PP
.Vb 7
\& Title   : replace_taxon_xml
\& Usage   : replace_taxon_xml($xml_data, $old_taxon, @new_taxon);
\& Function: Swap a taxon in a XML data structure with a new one. Leave new_taxon blank to remove old_taxon
\& Returns : 1 on success, 0 on failure. $xml_data is altered.
\& Args    : $xml_data, $old_taxon, @new_taxon. new_taxon may be null, in which case old_taxon is removed.
\&           @new_taxon is an array of names \- if this is longer than 1 element, then the old_taxon is
\&           replaced with a polytomy
.Ve
.PP
\fItree_equals\fR
.IX Subsection "tree_equals"
.PP
.Vb 5
\& Title   : tree_equals
\& Usage   : tree_equals($tree1, $tree2);
\& Function: Compare tree1 to tree2 and test for equality
\& Returns : 1 if equal, 0 if not. CHECK THIS
\& Args    : $tree1, $tree2 \- both NEWICK formatted strings.
.Ve
.PP
\fItree_contains\fR
.IX Subsection "tree_contains"
.PP
.Vb 5
\& Title   : tree_contains
\& Usage   : tree_contains($taxon,$tree_data);
\& Function: Check if $tree_data contains $taxon. Case insensitive. Accounts for _ or spaces in name
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $taxon, $tree_data
.Ve
.PP
Note that \f(CW$tree_data\fR can be a tree file or a tree string
.PP
\fIxml_from_year\fR
.IX Subsection "xml_from_year"
.PP
.Vb 5
\& Title   : xml_from_year
\& Usage   : xml_from_year($year,$xml_file);
\& Function: Check if $xml_file is from $year.
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $year, $xml_file
.Ve
.PP
\&\f(CW$xml_file\fR can be a file or \s-1XML\s0 data structure
.PP
\fIxml_contains_taxon\fR
.IX Subsection "xml_contains_taxon"
.PP
.Vb 5
\& Title   : xml_contains_taxon
\& Usage   : xml_contains_taxon($taxon,$xml_file);
\& Function: Check if $xml_file contains $taxon. Case insensitive. Accounts for _ or spaces in name
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $taxon, $xml_file
.Ve
.PP
\&\f(CW$xml_file\fR can be a file or \s-1XML\s0 data structure
.PP
\fIxml_contains_analysis\fR
.IX Subsection "xml_contains_analysis"
.PP
.Vb 5
\& Title   : xml_contains_analysis
\& Usage   : xml_contains_analysis($analysis,$xml);
\& Function: Check if $xml contains $analysis
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $analysis, $xml
.Ve
.PP
\&\f(CW$xml\fR can be a file or \s-1XML\s0 data structure
.PP
\fIxml_contains_character\fR
.IX Subsection "xml_contains_character"
.PP
.Vb 5
\& Title   : xml_contains_character
\& Usage   : xml_contains_character($character,$xml,$only);
\& Function: Check if $xml contains $character
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $character, $xml
.Ve
.PP
\&\f(CW$xml\fR can be a file or \s-1XML\s0 data structure. \f(CW$character\fR can be a specific charater type, e.g. 'cytb' or
can be one of \*(L"Molecular\*(R", \*(L"Morphological\*(R", \*(L"Behavioural\*(R" or \*(L"Other\*(R".
.PP
\fIcontains_data\fR
.IX Subsection "contains_data"
.PP
.Vb 5
\& Title   : contains_data
\& Usage   : contains_data(\e@data,$xml)
\& Function: Check if $xml contains $data. $data is case insensitive, but spaces in taxa names are not accounted for
\& Returns : 1 if it does, 0 if not. CHECK THIS
\& Args    : $data, $xml
.Ve
.PP
\&\f(CW$data\fR is a string or array of strings containing the data to be searched for within the \f(CW$xml\fR. \f(CW$data\fR can be one of:
.IP "Characters =item Analysis =item Taxa" 4
.IX Item "Characters =item Analysis =item Taxa"
.PP
If \f(CW$data\fR is an array an \s-1OR\s0 search is carried out.
.PP
\&\f(CW$xml\fR can be either a \s-1XML\s0 has (from read_xml_file) or a file name.
.PP
\fIcontains_fossils\fR
.IX Subsection "contains_fossils"
.PP
.Vb 5
\& Title   : contains_fossils
\& Usage   : contains_fossils($xmlfile);
\& Function: Tests if XML file contains fossil taxa
\& Returns : 0 \- no fossils, 1 all fossils, 2 mixed, \-1 incorrect info
\& Args    : $xmlfile, else croaks.
.Ve
.PP
\fIget_short_study_name\fR
.IX Subsection "get_short_study_name"
.PP
.Vb 5
\& Title   : get_short_study_name
\& Usage   : get_short_study_name(@xmlFileList);
\& Function: Return a unique (for the dataset defined by the input array) name for a source tree study
\& Returns : A linked list containing files (key) and the short name (value)
\& Args    : @xmlfile
.Ve
.PP
Call this function before the main loop over \s-1XML\s0 files to generate the short name. You can then use
the resulting hash to grab the short name for whichever file you're currently dealing with.
