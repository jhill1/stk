              ==================================================
              =    SUPERTREE TOOK KIT DEVELOPER TEST SUITE     =
              ==================================================
              
Davis, K.E. Hill, J.

The Supertree Tool Kit is a suite of Perl and Java tools designed to 
make the processing of source tree data, ready for inclusion in a supertree
phylogenetic analysis, easier.

This document describes the developer test regression test suite

Perl scripts:
    stk_amalgamate_trees.t
    stk_check_data.t
    stk_check_overlap.t
    stk_check_subs.t
    stk_create_bibliography.t
    stk_create_matrix.t
    stk_data_dependence.t
    stk_data_summary.t
    stk_fix_treeview.t
    stk_replace_genera.t
    stk_replace_taxa.t
    stk_tree_permutation.t
    stk_search_data.t
    
The data
=========

Data are stored in two places: there are specific data that a test requires in t/data. Two larger datasets also exist in test_dataset, one with XML files, one without. These allow testing of scripts that require a directory full of data to function. A copy of the data is created in the test for this (see replace_taxa.t for an example) - don't use the standard tests without copying them!

Correct (or more exactly, expected) data is stored in the "correct" folder. Update this if you add functionality.


The test scripts
================

The test suite is used using make (or nmake on Windows). Running the whole
suite using the command "make" produces the following output:
-----------------------
perl -MTest::Harness -e "runtests @ARGV;" stk_amalgamate_trees.t stk_check_data.t stk_check_overlap.t stk_check_subs.t stk_create_matrix.t stk_data_dependence.t stk_data_summary.t stk_fix_treeview.t stk_replace_genera.t stk_replace_taxa.t stk_search_data.t stk_tree_permutation.t 
stk_amalgamate_trees....ok                                                   
stk_check_data..........ok                                                   
stk_check_overlap.......ok                                                   
stk_check_subs..........ok                                                   
stk_create_matrix.......ok                                                   
stk_data_dependence.....ok                                                   
stk_data_summary........ok                                                   
stk_fix_treeview........ok                                                   
stk_replace_genera......ok                                                   
stk_replace_taxa........ok                                                   
stk_search_data.........ok                                                   
stk_tree_permutation....Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
Use of uninitialized value in addition (+) at /usr/local/share/perl/5.10.0/Bio/NEXUS/Node.pm line 899.
stk_tree_permutation....ok                                                   
All tests successful.

-------------------
More information when running the etsts can be gleaned using the verbose mode
make verbose

You can also run a single test using the following:

perl stk_tree_permutation.t

1..4
ok 1 - Standard named OK
ok 2 - Standard anon OK
ok 3 - tree_only OK
ok 4 - tree_only_anon OK

Each perl executable in the STK has a corresponding test script (.t). These tests use the Perl::Test
module.

These tests are a rudimentary regression test - if you add a script: add a test. If you add a feature, turn off your new feature (you did add it as an option, right?) and ensure the test passes, then add another test to test the script with your new feature enabled. If you optimise the scripts, they should still pass the tests. If not, your optimisation did not work.

These tests *do not* ensure bug-free use: there are simply too many variables to consider a full test for all of them. If you can think of a way of testing something that isn't currently tested, please add it!


